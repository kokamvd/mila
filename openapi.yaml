openapi: 3.0.0
info:
  title: MilaLevchuk
  version: 0.3.0
  contact:
    name: API Support
    email: kokamvd@gmail.com
  description: |
    API организовано по принципам REST. Контент передается в формате JSON. Частота запросов не дложна превышать 10 в секунду.

    # Версионность

    Версионность API придерживается спецификации [Semantic Versioning 2](https://semver.org)
  x-logo:
    url: ./milalogo.png
    altText: MilaLevchuk
servers:
  - url: 'https://milalevchuk.ru/rest'
    description: Prodaction
paths:
  /pays:
    get:
      summary: Получить список платежей
      description: |
        Возвращает список платежей. Все параметры запроса не обязательны.

        Ограничить выборку можно с помощью параметров `limit` и `start`.

        Фильтрация доступна по всем полям, кроме `roistat_visit`. Одновременно в фильтре участвует одно поле.
        Формат даты `2019-09-06T00:58:34`, все даты в часовом поясе Москвы UTC+3:00.

        Для фильтрации задаются три параметра, например, `filter=updatedon&filterType=gt&filterValue=2019-09-06T00:55:00`
        Если `filterType` принимает `null` или `notnull`, `filterValue` задавать нет необходимости.
        Допустимые значения и эквивалентные операторы:

        ```
        'eq' = '=',
        'ne' = '!=',
        'gt' = '>',
        'ge' = '>=',
        'lt' = '<',
        'le' = '<=',
        'null' = 'IS NULL',
        'notnull' = 'IS NOT NULL'
        ```
      tags:
        - Платежи
      parameters:
        - schema:
            type: integer
            default: 100
            minimum: 1
          in: query
          name: limit
          description: Ограничение количества возвращаемых записей
        - schema:
            type: integer
          in: query
          name: start
          description: Стартовая запись (смещение) для выборки
        - schema:
            type: string
            default: id
          in: query
          name: sort
          description: Поле для сортировки
        - schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
          in: query
          name: dir
          description: Направление сортировки
        - schema:
            type: string
          in: query
          name: filter
          description: Поле для фильтрации
        - schema:
            type: string
            enum:
              - eq
              - ne
              - gt
              - ge
              - lt
              - le
              - 'null'
              - notnull
            default: gt
          in: query
          name: filterType
          description: Оператор фильтра
        - schema:
            type: string
          in: query
          name: filterValue
          description: Операнд фильтра
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pay'
                  total:
                    type: integer
                    description: 'Общее количество платежей, удовлетворяющих условиям фильтрации и поиска'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  object:
                    type: object
                  success:
                    type: boolean
                    default: false
                  errors:
                    type: object
              example:
                message: Something wrong
                object: []
                success: false
                errors:
                  filterType: Wrong filter operator
  /paystatuses:
    get:
      summary: Получить список статусов платежей
      description: Возвращает список всех возможных статусов платежа
      tags:
        - Платежи
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    additionalProperties:
                      type: string
                  total:
                    type: string
                    description: Общее количество статусов
              example:
                results:
                  '0': Не оплачен
                  '1': Оплачен
                  '2': На подтверждении
                  '-1': Возврат
                  '-2': Отказ
                  '-3': Ожидание возврата
                total: 6
  /payfields:
    get:
      summary: Получить список полей платежа
      description: Возвращает список полей платежа
      tags:
        - Платежи
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    additionalProperties:
                      type: string
                  total:
                    type: integer
                    description: Общее количество полей
              example:
                results:
                  '1': id
                  '2': name
                  '3': email
                  '4': phone
                  '5': cost
                  '6': received
                  '7': success
                  '8': credit
                  '9': linked
                  '10': createdon
                  '11': createdby
                  '12': confirmedon
                  '13': formId
                  '14': updatedon
                  '15': roistat_visit
                total: 15
components:
  schemas:
    Pay:
      title: Pay
      description: Платежный счет. Создается при каждом переходе пользователя в платежную систему.
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: Имя плательщика
        email:
          type: string
        phone:
          type: string
        cost:
          type: number
          description: Стоимость
        received:
          type: number
          description: Получено средств (после вычета комиссии)
          nullable: true
        success:
          type: integer
          description: Статус платежа
        credit:
          type: integer
          description: id связанной рассрочки пользователя
          nullable: true
        linked:
          type: integer
          description: id заказа в магазине (если платеж из магазина)
        createdon:
          type: string
          description: Дата создания я платежа
        createdby:
          description: 'id пользователя, если зарегистрирован'
          type: integer
        confirmedon:
          type: string
          description: Дата подтверждения оплаты платежа
          nullable: true
        formId:
          type: string
          description: Идентификатор платежной формы
        updatedon:
          type: string
          description: Дата последнего обновления платежа. Заполняется изначально датой создания платежа
        roistat_visit:
          type: string
          description: 'Идентификатор визита, полученный из счетчика Roistat'
      example:
        id: 857310
        name: ''
        email: asdf@gmail.com
        phone: '+79623333357'
        cost: 1040
        received: null
        success: 0
        credit: null
        linked: 84328
        createdon: '2019-09-06 00:58:34'
        createdby: 79436
        confirmedon: null
        formId: store
        updatedon: '2019-09-06 00:58:34'
        roistat_visit: '123123'
  securitySchemes:
    SecretApiKey:
      type: apiKey
      in: header
      name: X-Authorization-Token
      description: |
        Ключ надо передавать в HTTP заголовке `X-Authorization-Token` с каждым запросом.
